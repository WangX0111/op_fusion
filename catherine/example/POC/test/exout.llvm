module attributes {llvm.data_layout = ""} {
  llvm.func @printU64(i64)
  llvm.func @printNewline()
  llvm.func @printF64(f64)
  llvm.func @free(!llvm.ptr<i8>)
  llvm.func @malloc(i64) -> !llvm.ptr<i8>
  llvm.func @printMemrefF32(i64, !llvm.ptr<i8>) attributes {sym_visibility = "private"}
  llvm.func @matmul(%arg0: !llvm.ptr<f16>, %arg1: !llvm.ptr<f16>, %arg2: i64, %arg3: i64, %arg4: i64, %arg5: i64, %arg6: i64, %arg7: !llvm.ptr<f16>, %arg8: !llvm.ptr<f16>, %arg9: i64, %arg10: i64, %arg11: i64, %arg12: i64, %arg13: i64, %arg14: !llvm.ptr<f32>, %arg15: !llvm.ptr<f32>, %arg16: i64, %arg17: i64, %arg18: i64, %arg19: i64, %arg20: i64) {
    %0 = llvm.mlir.undef : !llvm.struct<(ptr<f16>, ptr<f16>, i64, array<2 x i64>, array<2 x i64>)>
    %1 = llvm.insertvalue %arg0, %0[0] : !llvm.struct<(ptr<f16>, ptr<f16>, i64, array<2 x i64>, array<2 x i64>)> 
    %2 = llvm.insertvalue %arg1, %1[1] : !llvm.struct<(ptr<f16>, ptr<f16>, i64, array<2 x i64>, array<2 x i64>)> 
    %3 = llvm.insertvalue %arg2, %2[2] : !llvm.struct<(ptr<f16>, ptr<f16>, i64, array<2 x i64>, array<2 x i64>)> 
    %4 = llvm.insertvalue %arg3, %3[3, 0] : !llvm.struct<(ptr<f16>, ptr<f16>, i64, array<2 x i64>, array<2 x i64>)> 
    %5 = llvm.insertvalue %arg5, %4[4, 0] : !llvm.struct<(ptr<f16>, ptr<f16>, i64, array<2 x i64>, array<2 x i64>)> 
    %6 = llvm.insertvalue %arg4, %5[3, 1] : !llvm.struct<(ptr<f16>, ptr<f16>, i64, array<2 x i64>, array<2 x i64>)> 
    %7 = llvm.insertvalue %arg6, %6[4, 1] : !llvm.struct<(ptr<f16>, ptr<f16>, i64, array<2 x i64>, array<2 x i64>)> 
    %8 = llvm.mlir.undef : !llvm.struct<(ptr<f16>, ptr<f16>, i64, array<2 x i64>, array<2 x i64>)>
    %9 = llvm.insertvalue %arg7, %8[0] : !llvm.struct<(ptr<f16>, ptr<f16>, i64, array<2 x i64>, array<2 x i64>)> 
    %10 = llvm.insertvalue %arg8, %9[1] : !llvm.struct<(ptr<f16>, ptr<f16>, i64, array<2 x i64>, array<2 x i64>)> 
    %11 = llvm.insertvalue %arg9, %10[2] : !llvm.struct<(ptr<f16>, ptr<f16>, i64, array<2 x i64>, array<2 x i64>)> 
    %12 = llvm.insertvalue %arg10, %11[3, 0] : !llvm.struct<(ptr<f16>, ptr<f16>, i64, array<2 x i64>, array<2 x i64>)> 
    %13 = llvm.insertvalue %arg12, %12[4, 0] : !llvm.struct<(ptr<f16>, ptr<f16>, i64, array<2 x i64>, array<2 x i64>)> 
    %14 = llvm.insertvalue %arg11, %13[3, 1] : !llvm.struct<(ptr<f16>, ptr<f16>, i64, array<2 x i64>, array<2 x i64>)> 
    %15 = llvm.insertvalue %arg13, %14[4, 1] : !llvm.struct<(ptr<f16>, ptr<f16>, i64, array<2 x i64>, array<2 x i64>)> 
    %16 = llvm.mlir.undef : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>
    %17 = llvm.insertvalue %arg14, %16[0] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)> 
    %18 = llvm.insertvalue %arg15, %17[1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)> 
    %19 = llvm.insertvalue %arg16, %18[2] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)> 
    %20 = llvm.insertvalue %arg17, %19[3, 0] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)> 
    %21 = llvm.insertvalue %arg19, %20[4, 0] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)> 
    %22 = llvm.insertvalue %arg18, %21[3, 1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)> 
    %23 = llvm.insertvalue %arg20, %22[4, 1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)> 
    %24 = llvm.mlir.constant(0 : index) : i64
    %25 = llvm.mlir.constant(8192 : index) : i64
    %26 = llvm.mlir.constant(128 : index) : i64
    llvm.br ^bb1(%24 : i64)
  ^bb1(%27: i64):  // 2 preds: ^bb0, ^bb26
    %28 = llvm.icmp "slt" %27, %25 : i64
    llvm.cond_br %28, ^bb2, ^bb27
  ^bb2:  // pred: ^bb1
    %29 = llvm.mlir.constant(0 : index) : i64
    %30 = llvm.mlir.constant(8192 : index) : i64
    %31 = llvm.mlir.constant(128 : index) : i64
    llvm.br ^bb3(%29 : i64)
  ^bb3(%32: i64):  // 2 preds: ^bb2, ^bb25
    %33 = llvm.icmp "slt" %32, %30 : i64
    llvm.cond_br %33, ^bb4, ^bb26
  ^bb4:  // pred: ^bb3
    %34 = llvm.mlir.constant(0 : index) : i64
    %35 = llvm.mlir.constant(8192 : index) : i64
    %36 = llvm.mlir.constant(64 : index) : i64
    llvm.br ^bb5(%34 : i64)
  ^bb5(%37: i64):  // 2 preds: ^bb4, ^bb24
    %38 = llvm.icmp "slt" %37, %35 : i64
    llvm.cond_br %38, ^bb6, ^bb25
  ^bb6:  // pred: ^bb5
    %39 = llvm.mlir.constant(0 : index) : i64
    %40 = llvm.mlir.constant(8192 : index) : i64
    %41 = llvm.mlir.constant(64 : index) : i64
    llvm.br ^bb7(%39 : i64)
  ^bb7(%42: i64):  // 2 preds: ^bb6, ^bb23
    %43 = llvm.icmp "slt" %42, %40 : i64
    llvm.cond_br %43, ^bb8, ^bb24
  ^bb8:  // pred: ^bb7
    %44 = llvm.mlir.constant(0 : index) : i64
    %45 = llvm.mlir.constant(8192 : index) : i64
    %46 = llvm.mlir.constant(64 : index) : i64
    llvm.br ^bb9(%44 : i64)
  ^bb9(%47: i64):  // 2 preds: ^bb8, ^bb22
    %48 = llvm.icmp "slt" %47, %45 : i64
    llvm.cond_br %48, ^bb10, ^bb23
  ^bb10:  // pred: ^bb9
    %49 = llvm.mlir.constant(0 : index) : i64
    %50 = llvm.mlir.constant(8192 : index) : i64
    %51 = llvm.mlir.constant(32 : index) : i64
    llvm.br ^bb11(%49 : i64)
  ^bb11(%52: i64):  // 2 preds: ^bb10, ^bb21
    %53 = llvm.icmp "slt" %52, %50 : i64
    llvm.cond_br %53, ^bb12, ^bb22
  ^bb12:  // pred: ^bb11
    %54 = llvm.mlir.constant(0 : index) : i64
    %55 = llvm.mlir.constant(64 : index) : i64
    %56 = llvm.mlir.constant(1 : index) : i64
    llvm.br ^bb13(%54 : i64)
  ^bb13(%57: i64):  // 2 preds: ^bb12, ^bb20
    %58 = llvm.icmp "slt" %57, %55 : i64
    llvm.cond_br %58, ^bb14, ^bb21
  ^bb14:  // pred: ^bb13
    %59 = llvm.mlir.constant(0 : index) : i64
    %60 = llvm.mlir.constant(64 : index) : i64
    %61 = llvm.mlir.constant(1 : index) : i64
    llvm.br ^bb15(%59 : i64)
  ^bb15(%62: i64):  // 2 preds: ^bb14, ^bb19
    %63 = llvm.icmp "slt" %62, %60 : i64
    llvm.cond_br %63, ^bb16, ^bb20
  ^bb16:  // pred: ^bb15
    %64 = llvm.mlir.constant(0 : index) : i64
    %65 = llvm.mlir.constant(32 : index) : i64
    %66 = llvm.mlir.constant(1 : index) : i64
    llvm.br ^bb17(%64 : i64)
  ^bb17(%67: i64):  // 2 preds: ^bb16, ^bb18
    %68 = llvm.icmp "slt" %67, %65 : i64
    llvm.cond_br %68, ^bb18, ^bb19
  ^bb18:  // pred: ^bb17
    %69 = llvm.add %27, %42  : i64
    %70 = llvm.add %69, %57  : i64
    %71 = llvm.add %37, %52  : i64
    %72 = llvm.add %71, %67  : i64
    %73 = llvm.extractvalue %7[1] : !llvm.struct<(ptr<f16>, ptr<f16>, i64, array<2 x i64>, array<2 x i64>)> 
    %74 = llvm.mlir.constant(8192 : index) : i64
    %75 = llvm.mul %70, %74  : i64
    %76 = llvm.add %75, %72  : i64
    %77 = llvm.getelementptr %73[%76] : (!llvm.ptr<f16>, i64) -> !llvm.ptr<f16>
    %78 = llvm.load %77 : !llvm.ptr<f16>
    %79 = llvm.add %37, %52  : i64
    %80 = llvm.add %79, %67  : i64
    %81 = llvm.add %32, %47  : i64
    %82 = llvm.add %81, %62  : i64
    %83 = llvm.extractvalue %15[1] : !llvm.struct<(ptr<f16>, ptr<f16>, i64, array<2 x i64>, array<2 x i64>)> 
    %84 = llvm.mlir.constant(8192 : index) : i64
    %85 = llvm.mul %80, %84  : i64
    %86 = llvm.add %85, %82  : i64
    %87 = llvm.getelementptr %83[%86] : (!llvm.ptr<f16>, i64) -> !llvm.ptr<f16>
    %88 = llvm.load %87 : !llvm.ptr<f16>
    %89 = llvm.add %27, %42  : i64
    %90 = llvm.add %89, %57  : i64
    %91 = llvm.add %32, %47  : i64
    %92 = llvm.add %91, %62  : i64
    %93 = llvm.extractvalue %23[1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)> 
    %94 = llvm.mlir.constant(8192 : index) : i64
    %95 = llvm.mul %90, %94  : i64
    %96 = llvm.add %95, %92  : i64
    %97 = llvm.getelementptr %93[%96] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
    %98 = llvm.load %97 : !llvm.ptr<f32>
    %99 = llvm.fmul %78, %88  : f16
    %100 = llvm.fpext %99 : f16 to f32
    %101 = llvm.fadd %98, %100  : f32
    %102 = llvm.add %27, %42  : i64
    %103 = llvm.add %102, %57  : i64
    %104 = llvm.add %32, %47  : i64
    %105 = llvm.add %104, %62  : i64
    %106 = llvm.extractvalue %23[1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)> 
    %107 = llvm.mlir.constant(8192 : index) : i64
    %108 = llvm.mul %103, %107  : i64
    %109 = llvm.add %108, %105  : i64
    %110 = llvm.getelementptr %106[%109] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
    llvm.store %101, %110 : !llvm.ptr<f32>
    %111 = llvm.add %67, %66  : i64
    llvm.br ^bb17(%111 : i64)
  ^bb19:  // pred: ^bb17
    %112 = llvm.add %62, %61  : i64
    llvm.br ^bb15(%112 : i64)
  ^bb20:  // pred: ^bb15
    %113 = llvm.add %57, %56  : i64
    llvm.br ^bb13(%113 : i64)
  ^bb21:  // pred: ^bb13
    %114 = llvm.add %52, %51  : i64
    llvm.br ^bb11(%114 : i64)
  ^bb22:  // pred: ^bb11
    %115 = llvm.add %47, %46  : i64
    llvm.br ^bb9(%115 : i64)
  ^bb23:  // pred: ^bb9
    %116 = llvm.add %42, %41  : i64
    llvm.br ^bb7(%116 : i64)
  ^bb24:  // pred: ^bb7
    %117 = llvm.add %37, %36  : i64
    llvm.br ^bb5(%117 : i64)
  ^bb25:  // pred: ^bb5
    %118 = llvm.add %32, %31  : i64
    llvm.br ^bb3(%118 : i64)
  ^bb26:  // pred: ^bb3
    %119 = llvm.add %27, %26  : i64
    llvm.br ^bb1(%119 : i64)
  ^bb27:  // pred: ^bb1
    llvm.return
  }
  llvm.func @main() {
    %0 = llvm.mlir.constant(0 : index) : i64
    %1 = llvm.mlir.constant(8192 : index) : i64
    %2 = llvm.mlir.constant(1 : index) : i64
    %3 = llvm.mlir.constant(1099511627776 : index) : i64
    %4 = llvm.mlir.constant(1.024000e+12 : f64) : f64
    %5 = llvm.mlir.constant(1.000000e+00 : f16) : f16
    %6 = llvm.mlir.constant(1.000000e+00 : f32) : f32
    %7 = llvm.mlir.constant(8192 : index) : i64
    %8 = llvm.mlir.constant(8192 : index) : i64
    %9 = llvm.mlir.constant(1 : index) : i64
    %10 = llvm.mlir.constant(67108864 : index) : i64
    %11 = llvm.mlir.null : !llvm.ptr<f16>
    %12 = llvm.getelementptr %11[67108864] : (!llvm.ptr<f16>) -> !llvm.ptr<f16>
    %13 = llvm.ptrtoint %12 : !llvm.ptr<f16> to i64
    %14 = llvm.call @malloc(%13) : (i64) -> !llvm.ptr<i8>
    %15 = llvm.bitcast %14 : !llvm.ptr<i8> to !llvm.ptr<f16>
    %16 = llvm.mlir.undef : !llvm.struct<(ptr<f16>, ptr<f16>, i64, array<2 x i64>, array<2 x i64>)>
    %17 = llvm.insertvalue %15, %16[0] : !llvm.struct<(ptr<f16>, ptr<f16>, i64, array<2 x i64>, array<2 x i64>)> 
    %18 = llvm.insertvalue %15, %17[1] : !llvm.struct<(ptr<f16>, ptr<f16>, i64, array<2 x i64>, array<2 x i64>)> 
    %19 = llvm.mlir.constant(0 : index) : i64
    %20 = llvm.insertvalue %19, %18[2] : !llvm.struct<(ptr<f16>, ptr<f16>, i64, array<2 x i64>, array<2 x i64>)> 
    %21 = llvm.insertvalue %7, %20[3, 0] : !llvm.struct<(ptr<f16>, ptr<f16>, i64, array<2 x i64>, array<2 x i64>)> 
    %22 = llvm.insertvalue %8, %21[3, 1] : !llvm.struct<(ptr<f16>, ptr<f16>, i64, array<2 x i64>, array<2 x i64>)> 
    %23 = llvm.insertvalue %8, %22[4, 0] : !llvm.struct<(ptr<f16>, ptr<f16>, i64, array<2 x i64>, array<2 x i64>)> 
    %24 = llvm.insertvalue %9, %23[4, 1] : !llvm.struct<(ptr<f16>, ptr<f16>, i64, array<2 x i64>, array<2 x i64>)> 
    %25 = llvm.mlir.constant(8192 : index) : i64
    %26 = llvm.mlir.constant(8192 : index) : i64
    %27 = llvm.mlir.constant(1 : index) : i64
    %28 = llvm.mlir.constant(67108864 : index) : i64
    %29 = llvm.mlir.null : !llvm.ptr<f16>
    %30 = llvm.getelementptr %29[67108864] : (!llvm.ptr<f16>) -> !llvm.ptr<f16>
    %31 = llvm.ptrtoint %30 : !llvm.ptr<f16> to i64
    %32 = llvm.call @malloc(%31) : (i64) -> !llvm.ptr<i8>
    %33 = llvm.bitcast %32 : !llvm.ptr<i8> to !llvm.ptr<f16>
    %34 = llvm.mlir.undef : !llvm.struct<(ptr<f16>, ptr<f16>, i64, array<2 x i64>, array<2 x i64>)>
    %35 = llvm.insertvalue %33, %34[0] : !llvm.struct<(ptr<f16>, ptr<f16>, i64, array<2 x i64>, array<2 x i64>)> 
    %36 = llvm.insertvalue %33, %35[1] : !llvm.struct<(ptr<f16>, ptr<f16>, i64, array<2 x i64>, array<2 x i64>)> 
    %37 = llvm.mlir.constant(0 : index) : i64
    %38 = llvm.insertvalue %37, %36[2] : !llvm.struct<(ptr<f16>, ptr<f16>, i64, array<2 x i64>, array<2 x i64>)> 
    %39 = llvm.insertvalue %25, %38[3, 0] : !llvm.struct<(ptr<f16>, ptr<f16>, i64, array<2 x i64>, array<2 x i64>)> 
    %40 = llvm.insertvalue %26, %39[3, 1] : !llvm.struct<(ptr<f16>, ptr<f16>, i64, array<2 x i64>, array<2 x i64>)> 
    %41 = llvm.insertvalue %26, %40[4, 0] : !llvm.struct<(ptr<f16>, ptr<f16>, i64, array<2 x i64>, array<2 x i64>)> 
    %42 = llvm.insertvalue %27, %41[4, 1] : !llvm.struct<(ptr<f16>, ptr<f16>, i64, array<2 x i64>, array<2 x i64>)> 
    %43 = llvm.mlir.constant(8192 : index) : i64
    %44 = llvm.mlir.constant(8192 : index) : i64
    %45 = llvm.mlir.constant(1 : index) : i64
    %46 = llvm.mlir.constant(67108864 : index) : i64
    %47 = llvm.mlir.null : !llvm.ptr<f32>
    %48 = llvm.getelementptr %47[67108864] : (!llvm.ptr<f32>) -> !llvm.ptr<f32>
    %49 = llvm.ptrtoint %48 : !llvm.ptr<f32> to i64
    %50 = llvm.call @malloc(%49) : (i64) -> !llvm.ptr<i8>
    %51 = llvm.bitcast %50 : !llvm.ptr<i8> to !llvm.ptr<f32>
    %52 = llvm.mlir.undef : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)>
    %53 = llvm.insertvalue %51, %52[0] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)> 
    %54 = llvm.insertvalue %51, %53[1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)> 
    %55 = llvm.mlir.constant(0 : index) : i64
    %56 = llvm.insertvalue %55, %54[2] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)> 
    %57 = llvm.insertvalue %43, %56[3, 0] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)> 
    %58 = llvm.insertvalue %44, %57[3, 1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)> 
    %59 = llvm.insertvalue %44, %58[4, 0] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)> 
    %60 = llvm.insertvalue %45, %59[4, 1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<2 x i64>, array<2 x i64>)> 
    llvm.br ^bb1(%0 : i64)
  ^bb1(%61: i64):  // 2 preds: ^bb0, ^bb5
    %62 = llvm.icmp "slt" %61, %1 : i64
    llvm.cond_br %62, ^bb2, ^bb6
  ^bb2:  // pred: ^bb1
    llvm.br ^bb3(%0 : i64)
  ^bb3(%63: i64):  // 2 preds: ^bb2, ^bb4
    %64 = llvm.icmp "slt" %63, %1 : i64
    llvm.cond_br %64, ^bb4, ^bb5
  ^bb4:  // pred: ^bb3
    %65 = llvm.mlir.constant(8192 : index) : i64
    %66 = llvm.mul %61, %65  : i64
    %67 = llvm.add %66, %63  : i64
    %68 = llvm.getelementptr %15[%67] : (!llvm.ptr<f16>, i64) -> !llvm.ptr<f16>
    llvm.store %5, %68 : !llvm.ptr<f16>
    %69 = llvm.add %63, %2  : i64
    llvm.br ^bb3(%69 : i64)
  ^bb5:  // pred: ^bb3
    %70 = llvm.add %61, %2  : i64
    llvm.br ^bb1(%70 : i64)
  ^bb6:  // pred: ^bb1
    llvm.br ^bb7(%0 : i64)
  ^bb7(%71: i64):  // 2 preds: ^bb6, ^bb11
    %72 = llvm.icmp "slt" %71, %1 : i64
    llvm.cond_br %72, ^bb8, ^bb12
  ^bb8:  // pred: ^bb7
    llvm.br ^bb9(%0 : i64)
  ^bb9(%73: i64):  // 2 preds: ^bb8, ^bb10
    %74 = llvm.icmp "slt" %73, %1 : i64
    llvm.cond_br %74, ^bb10, ^bb11
  ^bb10:  // pred: ^bb9
    %75 = llvm.mlir.constant(8192 : index) : i64
    %76 = llvm.mul %71, %75  : i64
    %77 = llvm.add %76, %73  : i64
    %78 = llvm.getelementptr %33[%77] : (!llvm.ptr<f16>, i64) -> !llvm.ptr<f16>
    llvm.store %5, %78 : !llvm.ptr<f16>
    %79 = llvm.add %73, %2  : i64
    llvm.br ^bb9(%79 : i64)
  ^bb11:  // pred: ^bb9
    %80 = llvm.add %71, %2  : i64
    llvm.br ^bb7(%80 : i64)
  ^bb12:  // pred: ^bb7
    llvm.br ^bb13(%0 : i64)
  ^bb13(%81: i64):  // 2 preds: ^bb12, ^bb17
    %82 = llvm.icmp "slt" %81, %1 : i64
    llvm.cond_br %82, ^bb14, ^bb18
  ^bb14:  // pred: ^bb13
    llvm.br ^bb15(%0 : i64)
  ^bb15(%83: i64):  // 2 preds: ^bb14, ^bb16
    %84 = llvm.icmp "slt" %83, %1 : i64
    llvm.cond_br %84, ^bb16, ^bb17
  ^bb16:  // pred: ^bb15
    %85 = llvm.mlir.constant(8192 : index) : i64
    %86 = llvm.mul %81, %85  : i64
    %87 = llvm.add %86, %83  : i64
    %88 = llvm.getelementptr %51[%87] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
    llvm.store %6, %88 : !llvm.ptr<f32>
    %89 = llvm.add %83, %2  : i64
    llvm.br ^bb15(%89 : i64)
  ^bb17:  // pred: ^bb15
    %90 = llvm.add %81, %2  : i64
    llvm.br ^bb13(%90 : i64)
  ^bb18:  // pred: ^bb13
    %91 = llvm.call @rtclock() : () -> f64
    llvm.call @matmul(%15, %15, %19, %7, %8, %8, %9, %33, %33, %37, %25, %26, %26, %27, %51, %51, %55, %43, %44, %44, %45) : (!llvm.ptr<f16>, !llvm.ptr<f16>, i64, i64, i64, i64, i64, !llvm.ptr<f16>, !llvm.ptr<f16>, i64, i64, i64, i64, i64, !llvm.ptr<f32>, !llvm.ptr<f32>, i64, i64, i64, i64, i64) -> ()
    %92 = llvm.call @rtclock() : () -> f64
    %93 = llvm.fsub %92, %91  : f64
    llvm.call @printF64(%93) : (f64) -> ()
    llvm.call @printNewline() : () -> ()
    llvm.call @printU64(%3) : (i64) -> ()
    llvm.call @printNewline() : () -> ()
    %94 = llvm.fdiv %4, %93  : f64
    llvm.call @printF64(%94) : (f64) -> ()
    llvm.call @printNewline() : () -> ()
    llvm.call @printFlops(%94) : (f64) -> ()
    %95 = llvm.bitcast %15 : !llvm.ptr<f16> to !llvm.ptr<i8>
    llvm.call @free(%95) : (!llvm.ptr<i8>) -> ()
    %96 = llvm.bitcast %33 : !llvm.ptr<f16> to !llvm.ptr<i8>
    llvm.call @free(%96) : (!llvm.ptr<i8>) -> ()
    %97 = llvm.bitcast %51 : !llvm.ptr<f32> to !llvm.ptr<i8>
    llvm.call @free(%97) : (!llvm.ptr<i8>) -> ()
    llvm.return
  }
  llvm.func @printFlops(f64) attributes {sym_visibility = "private"}
  llvm.func @rtclock() -> f64 attributes {sym_visibility = "private"}
}

