// affineDataCopyGenerate
// changing the leadingDimension of the shared memory buffer that was generated by affineDataCopyGenerate to leadingDimension + paddingF actor. 
#map = affine_map<(d0) -> (d0)>
#map1 = affine_map<(d0) -> (d0 + 128)>
#map2 = affine_map<(d0, d1, d2) -> (d0)>
#map3 = affine_map<(d0, d1, d2) -> (d2)>
#map4 = affine_map<(d0) -> (d0 + 64)>
#map5 = affine_map<(d0, d1, d2) -> (d1)>
#map6 = affine_map<(d0, d1, d2, d3) -> (d0)>
#map7 = affine_map<(d0, d1, d2, d3) -> (d1)>
module {
  func.func @matmul(%arg0: memref<8192x8192xf16>, %arg1: memref<8192x8192xf16>, %arg2: memref<8192x8192xf32>) {
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %c1_0 = arith.constant 1 : index
    %c0_1 = arith.constant 0 : index
    %c64 = arith.constant 64 : index
    %c0_2 = arith.constant 0 : index
    %c64_3 = arith.constant 64 : index
    %c0_4 = arith.constant 0 : index
    %c0_5 = arith.constant 0 : index
    affine.for %arg3 = 0 to 8192 step 128 {
      affine.for %arg4 = 0 to 8192 step 128 {
        affine.for %arg5 = 0 to 8192 step 64 {
          affine.for %arg6 = #map(%arg3) to #map1(%arg3) {
            %0 = affine.apply #map2(%arg6, %arg3, %arg5)
            %1 = affine.apply #map3(%arg6, %arg3, %arg5)
            %alloc = memref.alloc() : memref<1x64xf16, 1>
            affine.for %arg7 = #map(%arg5) to #map4(%arg5) {
              %2 = affine.load %arg0[%arg6, %arg7] : memref<8192x8192xf16>
              affine.store %2, %alloc[0, %arg7 - %arg5] : memref<1x64xf16, 1>
            }
            affine.for %arg7 = #map(%arg4) to #map1(%arg4) {
              %2 = affine.apply #map5(%arg7, %arg5, %arg4)
              %3 = affine.apply #map2(%arg7, %arg5, %arg4)
              %alloc_6 = memref.alloc() : memref<64x1xf16, 1>
              affine.for %arg8 = #map(%arg5) to #map4(%arg5) {
                %10 = affine.load %arg1[%arg8, %arg7] : memref<8192x8192xf16>
                affine.store %10, %alloc_6[%arg8 - %arg5, 0] : memref<64x1xf16, 1>
              }
              %4 = affine.apply #map6(%arg6, %arg7, %arg3, %arg4)
              %5 = affine.apply #map7(%arg6, %arg7, %arg3, %arg4)
              %alloc_7 = memref.alloc() : memref<1x1xf32, 1>
              %6 = affine.load %arg2[%arg6, %arg7] : memref<8192x8192xf32>
              affine.store %6, %alloc_7[0, 0] : memref<1x1xf32, 1>
              affine.for %arg8 = #map(%arg5) to #map4(%arg5) {
                %10 = affine.load %alloc[0, -%arg5 + %arg8] : memref<1x64xf16, 1>
                %11 = affine.load %alloc_6[-%arg5 + %arg8, 0] : memref<64x1xf16, 1>
                %12 = affine.load %alloc_7[0, 0] : memref<1x1xf32, 1>
                %13 = arith.extf %10 : f16 to f32
                %14 = arith.extf %11 : f16 to f32
                %15 = arith.mulf %13, %14 : f32
                %16 = arith.addf %12, %15 : f32
                affine.store %16, %alloc_7[0, 0] : memref<1x1xf32, 1>
              }
              %7 = affine.apply #map6(%arg6, %arg7, %arg3, %arg4)
              %8 = affine.apply #map7(%arg6, %arg7, %arg3, %arg4)
              %9 = affine.load %alloc_7[0, 0] : memref<1x1xf32, 1>
              affine.store %9, %arg2[%arg6, %arg7] : memref<8192x8192xf32>
              memref.dealloc %alloc_7 : memref<1x1xf32, 1>
              memref.dealloc %alloc_6 : memref<64x1xf16, 1>
            }
            memref.dealloc %alloc : memref<1x64xf16, 1>
          }
        }
      }
    }
    return
  }
}